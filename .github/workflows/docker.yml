name: Build and Push Docker Image

on:
  workflow_call:
    inputs:
      version:
        description: 'Version tag for the Docker image'
        required: true
        type: string
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'

env:
  REGISTRY: ${{ inputs.registry }}
  IMAGE_NAME: ${{ github.repository }}

jobs:
  frontend-build:
    name: Build Frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Build frontend
        run: |
          cd frontend
          pnpm build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 1

  backend-build:
    name: Build Backend for Multiple Platforms
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - arch: amd64
            rust-target: x86_64-unknown-linux-gnu
            cross-compile-setup: |
              sudo apt-get update
              sudo apt-get install -y gcc-x86-64-linux-gnu
              echo 'CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc' >> $GITHUB_ENV
          - arch: arm64  
            rust-target: aarch64-unknown-linux-gnu
            cross-compile-setup: |
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu
              echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add target
        run: rustup target add ${{ matrix.target.rust-target }}

      - name: Setup cross-compilation
        run: ${{ matrix.target.cross-compile-setup }}

      - name: Cache Rust dependencies  
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend
          key: ${{ matrix.target.rust-target }}

      - name: Build backend
        run: |
          cd backend
          cargo build --release --target ${{ matrix.target.rust-target }} --no-default-features

      - name: Upload backend binary
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.target.arch }}
          path: backend/target/${{ matrix.target.rust-target }}/release/backend
          retention-days: 1

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [frontend-build, backend-build]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend build artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: ./artifacts/frontend/

      - name: Download backend artifacts (amd64)
        uses: actions/download-artifact@v4
        with:
          name: backend-amd64
          path: ./artifacts/backend-amd64/

      - name: Download backend artifacts (arm64)  
        uses: actions/download-artifact@v4
        with:
          name: backend-arm64
          path: ./artifacts/backend-arm64/

      - name: Make backend binaries executable
        run: |
          chmod +x ./artifacts/backend-amd64/backend
          chmod +x ./artifacts/backend-arm64/backend

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=${{ inputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.gha
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max