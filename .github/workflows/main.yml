name: Main Branch CI/CD

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'LICENSE'

permissions:
  contents: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  frontend:
    name: Frontend Build, Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Lint frontend
        run: |
          cd frontend
          pnpm lint

      - name: Check types
        run: |
          cd frontend
          pnpm check

      - name: Build frontend
        run: |
          cd frontend
          pnpm build

      - name: Test frontend
        run: |
          cd frontend
          pnpm test

  backend:
    name: Backend Build, Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Format check
        run: |
          cd backend
          cargo fmt --all -- --check

      - name: Lint backend
        run: |
          cd backend
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Build backend
        run: |
          cd backend
          cargo build --verbose

      - name: Test backend
        run: |
          cd backend
          cargo test --verbose

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [frontend, backend]
    permissions:
      contents: write
      pull-requests: write
    outputs:
      release-created: ${{ steps.release.outputs.release_created }}
      tag-name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: simple

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [frontend, backend, release]
    if: ${{ needs.release.outputs.release-created == 'true' }}
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha
            type=raw,value=${{ needs.release.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max