name: Main Branch CI/CD

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'LICENSE'

permissions:
  contents: write
  pull-requests: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  frontend:
    name: Frontend Build, Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Install dependencies
        run: |
          cd frontend
          pnpm install

      - name: Lint frontend
        run: |
          cd frontend
          pnpm lint

      - name: Check types
        run: |
          cd frontend
          pnpm check

      - name: Build frontend
        run: |
          cd frontend
          pnpm build

      - name: Test frontend
        run: |
          cd frontend
          pnpm test

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 1

  backend-test:
    name: Backend Lint & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend

      - name: Format check
        run: |
          cd backend
          cargo fmt --all -- --check

      - name: Lint backend
        run: |
          cd backend
          cargo clippy --all-targets --all-features -- -D warnings

      - name: Build backend
        run: |
          cd backend
          cargo build --verbose

      - name: Test backend
        run: |
          cd backend
          cargo test --verbose

  backend-build:
    name: Backend Multi-Platform Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - arch: amd64
            rust-target: x86_64-unknown-linux-gnu
            cross-compile-setup: |
              sudo apt-get update
              sudo apt-get install -y gcc-x86-64-linux-gnu
              echo 'CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-linux-gnu-gcc' >> $GITHUB_ENV
          - arch: arm64  
            rust-target: aarch64-unknown-linux-gnu
            cross-compile-setup: |
              sudo apt-get update
              sudo apt-get install -y gcc-aarch64-linux-gnu
              echo 'CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc' >> $GITHUB_ENV

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Add target
        run: rustup target add ${{ matrix.target.rust-target }}

      - name: Setup cross-compilation
        run: ${{ matrix.target.cross-compile-setup }}

      - name: Cache Rust dependencies  
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: backend
          key: ${{ matrix.target.rust-target }}

      - name: Build backend
        run: |
          cd backend
          cargo build --release --target ${{ matrix.target.rust-target }} --no-default-features

      - name: Upload backend binary
        uses: actions/upload-artifact@v4
        with:
          name: backend-${{ matrix.target.arch }}
          path: backend/target/${{ matrix.target.rust-target }}/release/backend
          retention-days: 1

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [frontend, backend-test, backend-build]
    permissions:
      contents: write
      pull-requests: write
    outputs:
      release-created: ${{ steps.release.outputs.release_created }}
      tag-name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: .release-please-config.json

  docker:
    name: Build and Push Docker Image
    needs: [frontend, backend-test, backend-build, release]
    if: ${{ needs.release.outputs.release-created == 'true' }}
    uses: ./.github/workflows/docker.yml
    with:
      version: ${{ needs.release.outputs.version }}
      registry: ghcr.io
      image-name: ${{ github.repository }}
